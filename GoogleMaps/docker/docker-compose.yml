version: '3.8'

services:
  # ============== GOOGLE MAPS CLONE SERVICES ==============
  
  # Main API Gateway
  api-gateway:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    ports:
      - "8080:8080"
    environment:
      - CASSANDRA_HOSTS=cassandra
      - REDIS_HOST=redis
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - POSTGRES_HOST=postgres
      - DEBUG=false
    depends_on:
      - cassandra
      - redis
      - elasticsearch
      - postgres
    volumes:
      - ../src:/app/src
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - maps-network

  # ============== DATABASE SERVICES ==============
  
  # Cassandra - Location time-series data
  cassandra:
    image: cassandra:4.1
    container_name: maps-cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=MapsCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_NUM_TOKENS=256
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./cassandra/cassandra.yaml:/etc/cassandra/cassandra.yaml
    restart: unless-stopped
    networks:
      - maps-network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis - Caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: maps-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - maps-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Elasticsearch - Places search and analytics
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: maps-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - maps-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL with PostGIS - Spatial data
  postgres:
    image: postgis/postgis:15-3.3
    container_name: maps-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=maps_spatial
      - POSTGRES_USER=maps_user
      - POSTGRES_PASSWORD=maps_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - maps-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U maps_user -d maps_spatial"]
      interval: 10s
      timeout: 5s
      retries: 3

  # InfluxDB - Metrics and monitoring
  influxdb:
    image: influxdb:2.7
    container_name: maps-influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminpassword
      - DOCKER_INFLUXDB_INIT_ORG=maps-org
      - DOCKER_INFLUXDB_INIT_BUCKET=maps-metrics
    volumes:
      - influxdb_data:/var/lib/influxdb2
    restart: unless-stopped
    networks:
      - maps-network

  # Neo4j - Road network graph
  neo4j:
    image: neo4j:5.15
    container_name: maps-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    restart: unless-stopped
    networks:
      - maps-network

  # ============== MONITORING STACK ==============
  
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: maps-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - maps-network

  # Grafana - Monitoring dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: maps-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    networks:
      - maps-network
    depends_on:
      - prometheus

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: maps-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - maps-network

  # ============== MESSAGE QUEUES ==============
  
  # Apache Kafka - Event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: maps-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - maps-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: maps-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - maps-network

  # ============== ML SERVICES ==============
  
  # ML Model Server
  ml-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ml
    container_name: maps-ml-server
    ports:
      - "8001:8001"
    environment:
      - MODEL_PATH=/app/models
      - REDIS_HOST=redis
    volumes:
      - ../models:/app/models
      - ml_cache:/app/cache
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - maps-network

  # ============== LOAD BALANCER ==============
  
  # Nginx - Load balancer and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: maps-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/ssl/certs
      - nginx_logs:/var/log/nginx
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - maps-network

  # ============== UTILITIES ==============
  
  # Redis Commander - Redis GUI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: maps-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - maps-network

  # Elasticsearch Head - Elasticsearch GUI
  elasticsearch-head:
    image: mobz/elasticsearch-head:5
    container_name: maps-es-head
    ports:
      - "9100:9100"
    depends_on:
      - elasticsearch
    networks:
      - maps-network

# ============== VOLUMES ==============
volumes:
  cassandra_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  postgres_data:
    driver: local
  influxdb_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  ml_cache:
    driver: local
  nginx_logs:
    driver: local

# ============== NETWORKS ==============
networks:
  maps-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16