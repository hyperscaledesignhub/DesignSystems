version: '3.8'

services:
  # Redis for shared state and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crawler_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # URL Frontier Service
  frontier:
    build:
      context: .
      args:
        SERVICE_NAME: frontier
    ports:
      - "5001:5000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=5000
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - crawler_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # HTML Downloader Service
  downloader:
    build:
      context: .
      args:
        SERVICE_NAME: downloader
    ports:
      - "5002:5000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=5000
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - crawler_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Content Parser Service
  parser:
    build:
      context: .
      args:
        SERVICE_NAME: parser
    ports:
      - "5003:5000"
    environment:
      - PORT=5000
    networks:
      - crawler_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Content Deduplication Service
  deduplication:
    build:
      context: .
      args:
        SERVICE_NAME: deduplication
    ports:
      - "5004:5000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=5000
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - crawler_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # URL Extractor Service
  extractor:
    build:
      context: .
      args:
        SERVICE_NAME: extractor
    ports:
      - "5005:5000"
    environment:
      - PORT=5000
    networks:
      - crawler_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Content Storage Service
  storage:
    build:
      context: .
      args:
        SERVICE_NAME: storage
    ports:
      - "5006:5000"
    environment:
      - PORT=5000
      - STORAGE_PATH=/app/data
    volumes:
      - storage_data:/app/data
    networks:
      - crawler_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # API Gateway Service
  gateway:
    build:
      context: .
      args:
        SERVICE_NAME: gateway
    ports:
      - "5010:5000"
    environment:
      - FRONTIER_URL=http://frontier:5000
      - DOWNLOADER_URL=http://downloader:5000
      - PARSER_URL=http://parser:5000
      - DEDUP_URL=http://deduplication:5000
      - PORT=5000
    depends_on:
      - frontier
      - downloader
      - parser
      - deduplication
    networks:
      - crawler_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - crawler_network
    restart: unless-stopped

  # Grafana for visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - crawler_network
    restart: unless-stopped

networks:
  crawler_network:
    driver: bridge

volumes:
  redis_data:
  storage_data:
  prometheus_data:
  grafana_data: